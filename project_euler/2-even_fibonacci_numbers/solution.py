"""
Problem 2: Even Fibonacci numbers

Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four
million, find the sum of the even-valued terms.

https://projecteuler.net/problem=2
"""


def evenFibonacciNumbers(x: int = 1, y: int = 2, sequence_sum: int = 2) -> int:
    """
    The default value of `sequence_sum` is 2 because the default value of `y` will
    not be evaluated in the code below. This fixes the output being two less than the
    expected output.

    :param x: The 2nd to the last fibonacci number.
    :param y: The last fibonacci number.
    :param sequence_sum: The current sum of even numbers.

    :returns: The sum of all even numbers in the fibonacci sequence that are
              less than 4,000,000.
    """

    if y >= 4000000:  # Only evaluate values that are less than 4,000,000.
        return sequence_sum

    else:
        z = x + y  # Get the next number in the fibonacci sequence.
        if z % 2 == 0:  # Check if z is an even number. If true, add to sequence_sum.
            sequence_sum += z

        return evenFibonacciNumbers(y, z, sequence_sum)


if __name__ == "__main__":
    print(evenFibonacciNumbers())
